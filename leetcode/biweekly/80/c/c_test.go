// Code generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	"testing"
)

func Test_c(t *testing.T) {
	targetCaseNum := 0
	if err := testutil.RunLeetCodeFuncWithFile(t, matchReplacement, "c.txt", targetCaseNum); err != nil {
		t.Fatal(err)
	}
}

// https://leetcode.cn/contest/biweekly-contest-80/problems/match-substring-after-replacement/

//func TestCompareInf(t *testing.T) {
//	//return
//	testutil.DebugTLE = 0
//
//	inputGenerator := func() (s, sub string, mp [][]byte) {
//		rg := testutil2.NewRandGenerator()
//		s = rg.Str(1, 4, 'a', 'c')
//		sub = rg.Str(1, len(s), 'a', 'c')
//		n := rg.IntOnly(0, 1)
//		for i := 0; i < n; i++ {
//			mp = append(mp, []byte{byte(rg.Int('a', 'c')), byte(rg.Int('a', 'c'))})
//		}
//		return
//	}
//
//
//	testutil.CompareInf(t, inputGenerator, matchReplacement2, matchReplacement)
//}

//var s = strings.Repeat("b",2499) + "c" +  strings.Repeat("b",2499)
//var sub = strings.Repeat("a",2500)
//var mp = [][]byte{}
//
//func init() {
//	for i := byte('0'); i <='z'; i++ {
//		if i == 'c' {
//			continue
//		}
//		mp = append(mp, []byte{'a',i})
//	}
//}
//
//func Benchmark1(b *testing.B) {
//	for _i := 0; _i < b.N; _i++ {
//		matchReplacement(s,sub, mp)
//	}
//}
